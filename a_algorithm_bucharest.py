# -*- coding: utf-8 -*-
"""A* Algorithm Bucharest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11HEDQFnuPYwJ-VZBfndRBP5ojFQpZrde
"""

#Library yang digunakan
import numpy as np
import pandas as pd

#Data mentah
nodes = np.array([["Oradea", "Zerind", 71],
["Oradea", "Sibiu", 151 ],
["Arad", "Zerind", 75 ],
["Arad", "Sibiu", 140 ],
["Arad", "Timisoara", 118],
["Timisoara", "Lugoj", 111],
["Sibiu", "Rimnicu Vilcea", 80],
["Sibiu", "Fagaras", 99],
["Lugoj", "Mehadia", 70],
["Mehadia", "Dobreta", 75],
["Dobreta", "Craiova", 120],
["Rimnicu Vilcea", "Craiova", 146],
["Rimnicu Vilcea", "Pitesti", 97],
["Fagaras", "Bucharest", 211],
["Craiova", "Pitesti", 138],
["Pitesti", "Bucharest", 101],
["Bucharest", "Giurgiu", 90],
["Bucharest", "Urziceni", 85],
["Urziceni", "Vaslui", 142],
["Vaslui", "Iasi", 92],
["Iasi", "Neamt", 87],
["Urziceni", "Hirsova", 98],
["Hirsova", "Eforie", 86]])

to_Bucha = np.array([["Arad", 366],
["Bucharest", 0],
["Craiova", 160],
["Dobreta", 242],
["Eforie", 161],
["Fagaras", 178],
["Giurgiu", 77],
["Hirsova", 151],
["Iasi", 226],
["Lugoj", 244],
["Mehadia", 241],
["Neamt", 234],
["Oradea", 380],
["Pitesti", 98],
["Rimnicu Vilcea", 193],
["Sibiu", 253],
["Timisoara", 329],
["Urziceni", 80],
["Vaslui", 199],
["Zerind", 374]])

#Simpan dalam dataframe
df_nodes = pd.DataFrame(nodes, columns = ['Nodes 1','Nodes 2','Length'])
df_to_bucha = pd.DataFrame(to_Bucha, columns = ['To Bucharest','Length'])

#Menetapkan tipe data
df_nodes['Nodes 1'] = df_nodes['Nodes 1'].astype("string")
df_nodes['Nodes 2'] = df_nodes['Nodes 2'].astype("string")
df_nodes['Length'] = df_nodes['Length'].astype("int")
df_to_bucha['To Bucharest'] = df_to_bucha['To Bucharest'].astype("string")
df_to_bucha['Length'] = df_to_bucha['Length'].astype("int")

start = input("Masukkan kota titik start: ") #Starting point
path = [] #Node yang akan dilalui
path.append(start) #Append starting point ke path
total_len = 0 #Total jarak real

#Iterasi selama belum sampai di Bucharest
while start != "Bucharest":
  #Ambil kandidat node yang berelasi dengan starting point
  candidate = df_nodes.loc[(df_nodes['Nodes 1'] == start) | (df_nodes['Nodes 2'] == start)]
  if candidate.empty:
    #Jika kosong, berarti tidak ada yang berelasi
    print("Start tidak ditemukan")
    break
  for node in path:
    #Node yang sudah dilalui tidak dapat dilalui lagi, sehingga dikeluarkan dari kandidat
    if node != start:
      candidate = candidate.loc[(candidate['Nodes 1'] != node) & (candidate['Nodes 2'] != node)]
  
  #Variable untuk membandingkan
  curr_best_node = 0 #Node tujuan
  curr_best_len = 0 #Jarak real
  curr_best_heu = 10000 #Heuristik terbaik
  #Iterasikan kandidat
  for index, row in candidate.iterrows():
    #Jika starting point di kolom pertama, berarti node tujuan di kolom kedua
    if row['Nodes 1'] == start:
      #Heuristic adalah jarak node ke Bucharest ditambah total jarak real yang sudah dilalui dan jarak real dari starting point ke node
      heuristic = df_to_bucha.loc[df_to_bucha['To Bucharest'] ==  row['Nodes 2'], 'Length'].values + total_len + row['Length']
      #Jika heuristik baru lebih baik dari sebelumnya, simpan parameter untuk dibandingkan pada iterasi selanjutnya
      if heuristic < curr_best_heu:
        curr_best_heu = heuristic
        curr_best_len = row['Length']
        curr_best_node = row['Nodes 2']
    #Jika starting point di kolom kedua, berarti node tujuan di kolom pertama
    elif row['Nodes 2'] == start:
      heuristic = df_to_bucha.loc[df_to_bucha['To Bucharest'] ==  row['Nodes 1'], 'Length'].values + total_len + row['Length']
      if heuristic < curr_best_heu:
        curr_best_heu = heuristic
        curr_best_len = row['Length']
        curr_best_node = row['Nodes 1']

  path.append(curr_best_node) #Simpan node yang terbaik ke dalam path
  total_len += curr_best_len #Kalkulasi jarak real
  start = curr_best_node #Ubah node yang terbaik menjadi starting point iterasi selanjutnya

print("Jalur yang akan dilalui: ", path) #Output path yang dilalui
print("Total jarak yang ditempuh: ", total_len) #Output jarak yang ditempuh